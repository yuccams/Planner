@page
@model TaskPlanner.Pages.Tasks.CreateModel
@{
    ViewData["Title"] = "Create Task";
}



<div class="create-task-section">
    <div class="container">
        <div class="create-task-content">
            <div class="create-task-card">
                <div class="card-header">
                    <h2 class="card-title">
                        <i class="fas fa-plus me-2"></i><span id="page-title">Create New Task</span>
                    </h2>
                </div>
                <div class="card-body">
                    <form method="post" novalidate class="ajax-form">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label for="taskName" class="form-label">
                                <i class="fas fa-tag me-1"></i><span id="label-task-name">Task Name</span>
                            </label>
                            <input type="text" id="taskName" name="Task.Name" asp-for="Task.Name" class="form-control" placeholder="Enter task name" />
                            <span asp-validation-for="Task.Name" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label for="taskDescription" class="form-label">
                                <i class="fas fa-align-left me-1"></i><span id="label-description">Description</span>
                            </label>
                            <textarea id="taskDescription" name="Task.Description" asp-for="Task.Description" class="form-control" rows="3" 
                                      placeholder="Enter task description (optional)"></textarea>
                            <span asp-validation-for="Task.Description" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label for="taskDueDate" class="form-label">
                                <i class="fas fa-calendar me-1"></i><span id="label-due-date">Due Date</span>
                            </label>
                            <div class="custom-datetime-input">
                                <input type="datetime-local" id="taskDueDate" name="Task.DueDate" asp-for="Task.DueDate" class="form-control custom-datetime" />
                                <div class="datetime-overlay">
                                    <i class="fas fa-calendar-alt"></i>
                                </div>
                            </div>
                            <span asp-validation-for="Task.DueDate" class="text-danger"></span>
                        </div>

                        <div class="form-actions">
                            <a href="/" class="btn btn-back">
                                <i class="fas fa-arrow-left me-2"></i><span id="btn-back">Back to Tasks</span>
                            </a>
                            <button type="button" id="submitButton" class="btn btn-create" onclick="submitFormAjax();">
                                <i class="fas fa-save me-2"></i><span id="btn-create">Create Task</span>
                            </button>
                        </div>
                        
                        
                        

                    </form>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    // Language support
    // Expose translator globally so header can call it
    window.translateCreatePage = function translateCreatePage() {
        const currentLang = (window.currentLanguage || localStorage.getItem('language') || 'en');
        const t = (window.translations && window.translations[currentLang]) || null;
        if (!t) return;
        const pageTitle = document.getElementById('page-title');
        if (pageTitle && t.pageTitleCreate) pageTitle.textContent = t.pageTitleCreate;
        const taskNameLabel = document.getElementById('label-task-name');
        if (taskNameLabel && t.taskName) taskNameLabel.textContent = t.taskName;
        const descriptionLabel = document.getElementById('label-description');
        if (descriptionLabel && t.description) descriptionLabel.textContent = t.description;
        const dueDateLabel = document.getElementById('label-due-date');
        if (dueDateLabel && t.dueDate) dueDateLabel.textContent = t.dueDate;
        const backButton = document.getElementById('btn-back');
        if (backButton && t.backToTasks) backButton.textContent = t.backToTasks;
        const createButton = document.getElementById('btn-create');
        if (createButton && t.createTask) createButton.textContent = t.createTask;
        const taskNameInput = document.getElementById('taskName');
        if (taskNameInput && t.taskNamePlaceholder) taskNameInput.placeholder = t.taskNamePlaceholder;
        const descriptionInput = document.getElementById('taskDescription');
        if (descriptionInput && t.descriptionPlaceholder) descriptionInput.placeholder = t.descriptionPlaceholder;
        const titleText = t.pageTitleCreate || 'Create New Task';
        document.title = titleText + ' - ' + (currentLang === 'uk' ? '–ü–ª–∞–Ω–µ—Ä –Æ–ª—ñ—ó' : 'Julia\'s Planner');
    }
    // Live updates when language changes (bind immediately)
    window.addEventListener('languageChanged', function() { try { setTimeout(() => window.translateCreatePage(), 0); } catch(_) {} });
    window.addEventListener('storage', function(e) { if (e.key === 'language') { try { window.translateCreatePage(); } catch(_) {} } });
    window.addEventListener('message', function(e) { if (e && e.data && e.data.type === 'languageChanged') { try { window.translateCreatePage(); } catch(_) {} } });

    document.addEventListener('DOMContentLoaded', function() {
        const savedLang = localStorage.getItem('language') || 'en';
        const currentLangEl = document.getElementById('currentLang');
        if (currentLangEl) currentLangEl.textContent = savedLang.toUpperCase();
        try { window.translateCreatePage(); } catch(_) {}
        if (typeof MutationObserver !== 'undefined' && currentLangEl) {
            const obs = new MutationObserver(() => { try { window.translateCreatePage(); } catch(_) {} });
            obs.observe(currentLangEl, { childList: true, characterData: true, subtree: true });
        }
    });
</script>

<script>
    // Ensure calendar overlay and input open the native picker
    document.addEventListener('DOMContentLoaded', function() {
        const dueDateInput = document.getElementById('taskDueDate');
        const calendarOverlay = document.querySelector('.datetime-overlay');
        if (!dueDateInput) return;

        function tryOpenPicker() {
            try {
                if (typeof dueDateInput.showPicker === 'function') {
                    dueDateInput.showPicker();
                    return true;
                }
            } catch(_) {}
            return false;
        }

        function openDatePickerFallback() {
            if (!tryOpenPicker()) {
                // Fallbacks
                dueDateInput.focus();
                // Synthesize a user click to improve compatibility
                try { dueDateInput.dispatchEvent(new MouseEvent('mousedown', { bubbles: true, cancelable: true })); } catch(_) {}
                try { dueDateInput.click(); } catch(_) {}
            }
        }

        // Bind on overlay
        if (calendarOverlay) {
            calendarOverlay.style.pointerEvents = 'auto';
            calendarOverlay.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                openDatePickerFallback();
            });
        }

        // Bind on input as well (click/focus)
        dueDateInput.addEventListener('click', openDatePickerFallback);
        dueDateInput.addEventListener('focus', function(){ setTimeout(openDatePickerFallback, 0); });
        dueDateInput.addEventListener('keydown', function(e){ if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); openDatePickerFallback(); } });
    });
</script>

<script>
    // AJAX —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è - –≤–∏–Ω–µ—Å–µ–Ω–∞ –≤ –æ–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç
    window.submitFormAjax = function() {
            console.log('üöÄ AJAX –í–Ü–î–ü–†–ê–í–ö–ê –†–û–ó–ü–û–ß–ê–¢–ê');
            
            const form = document.querySelector('form[method="post"]');
            const button = document.getElementById('submitButton');
            
            console.log('üìã –§–æ—Ä–º–∞ –∑–Ω–∞–π–¥–µ–Ω–∞:', form);
            console.log('üîò –ö–Ω–æ–ø–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞:', button);
            
            if (!form) {
                console.error('‚ùå –§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –°–ü–û–ß–ê–¢–ö–£ –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ü–û–õ–Ø
            const nameInput = document.getElementById('taskName');
            const descInput = document.getElementById('taskDescription');
            const dateInput = document.getElementById('taskDueDate');
            
            console.log('üìã –ï–õ–ï–ú–ï–ù–¢–ò –ü–û–õ–Ü–í:');
            console.log('  nameInput:', nameInput);
            console.log('  descInput:', descInput);
            console.log('  dateInput:', dateInput);
            
            if (!nameInput || !descInput || !dateInput) {
                console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏!');
                showAlert('‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏', 'danger');
                return;
            }
            
            console.log('üìã –ó–ù–ê–ß–ï–ù–ù–Ø –ü–û–õ–Ü–í –ü–ï–†–ï–î –í–ê–õ–Ü–î–ê–¶–Ü–Ñ–Æ:');
            console.log(`  taskName.value: "${nameInput.value}"`);
            console.log(`  taskName.name: "${nameInput.name}"`);
            console.log(`  taskDescription.value: "${descInput.value}"`);
            console.log(`  taskDescription.name: "${descInput.name}"`);
            console.log(`  taskDueDate.value: "${dateInput.value}"`);
            console.log(`  taskDueDate.name: "${dateInput.name}"`);
            
            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Loading...';
            console.log('üîí –ö–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞');
            
            // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏ —É URLSearchParams –∑–∞–º—ñ—Å—Ç—å FormData –¥–ª—è –∫—Ä–∞—â–æ–≥–æ model binding
            const formData = new URLSearchParams();
            
            // –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –≤—Ä—É—á–Ω—É
            formData.append('Task.Name', nameInput.value);
            formData.append('Task.Description', descInput.value);
            formData.append('Task.DueDate', dateInput.value);
            
            // –î–æ–¥–∞—î–º–æ antiforgery token
            const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) {
                formData.append('__RequestVerificationToken', tokenInput.value);
            }
            
            console.log('üìã –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –∑—ñ–±—Ä–∞–Ω–æ (URLSearchParams)');
            
            // –õ–æ–≥—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è
            console.log('üìã –î–ê–ù–Ü URLSEARCHPARAMS:');
            for (let [key, value] of formData.entries()) {
                console.log(`  ${key}: "${value}"`);
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            const taskName = formData.get('Task.Name');
            const taskDueDate = formData.get('Task.DueDate');
            
            console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—ñ–≤: Name="${taskName}", DueDate="${taskDueDate}"`);
            
            if (!taskName || taskName.trim() === '') {
                showAlert('‚ùå –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—è!', 'danger');
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-save me-2"></i>Create Task';
                return;
            }
            
            if (!taskDueDate) {
                showAlert('‚ùå –î–∞—Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', 'danger');
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-save me-2"></i>Create Task';
                return;
            }
            
            console.log(`‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: Name="${taskName}", DueDate="${taskDueDate}"`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –∫—É–¥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            const actionUrl = form.action || '/Tasks/Create';
            console.log(`üåê AJAX URL: ${actionUrl}`);
            console.log(`üåê Current page: ${window.location.href}`);
            console.log(`üåê Form action attribute: ${form.action}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ antiforgery token (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –æ–≥–æ–ª–æ—à–µ–Ω—É –∑–º—ñ–Ω–Ω—É)
            console.log('üîê Antiforgery token element:', tokenInput);
            console.log('üîê Token value:', tokenInput ? tokenInput.value : 'NOT FOUND');
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ AJAX –∑ application/x-www-form-urlencoded
            fetch(actionUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(async response => {
                console.log('üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                console.log('üì° URL –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', response.url);
                console.log('üì° Headers:', [...response.headers.entries()]);
                
                // –ß–∏—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                const responseText = await response.text();
                console.log('üì° –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–ø–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤):', responseText.substring(0, 500));
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ HTML
                const parser = new DOMParser();
                const doc = parser.parseFromString(responseText, 'text/html');
                const validationErrors = doc.querySelectorAll('.text-danger');
                
                if (validationErrors.length > 0) {
                    console.log('‚ùå –ó–ù–ê–ô–î–ï–ù–û –ü–û–ú–ò–õ–ö–ò –í–ê–õ–Ü–î–ê–¶–Ü–á:');
                    const errors = [];
                    validationErrors.forEach((error, index) => {
                        const errorText = error.textContent.trim();
                        if (errorText) {
                            console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${index + 1}: ${errorText}`);
                            errors.push(errorText);
                        }
                    });
                    
                    const errorMessage = errors.length > 0 ? errors.join(', ') : '–ù–µ–≤—ñ–¥–æ–º—ñ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó';
                    console.log('‚ùå –í–°–Ü –ü–û–ú–ò–õ–ö–ò:', errorMessage);
                    showAlert('‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ' + errorMessage, 'danger');
                    
                    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-save me-2"></i>Create Task';
                    return;
                }
                
                if (response.ok) {
                    console.log('‚úÖ –ó–ê–í–î–ê–ù–ù–Ø –°–¢–í–û–†–ï–ù–û –£–°–ü–Ü–®–ù–û!');
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç
                    if (response.url.includes('/') && response.status === 200) {
                        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è');
                        try {
                            const headerLang = ((document.getElementById('currentLang')?.textContent)||'en').toLowerCase();
                            if (headerLang) { try { localStorage.setItem('language', headerLang); window.currentLanguage = headerLang; } catch(_) {} }
                            const lang = headerLang || (window.currentLanguage || localStorage.getItem('language') || 'en');
                            const t = (window.translations && window.translations[lang]) || {};
                            const msg = lang==='uk' ? (t.toastCreated || '–ó–∞–≤–¥–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!') : (t.toastCreated || 'Task created successfully!');
                            showAlert(msg, 'success');
                        } catch(_) { showAlert('Task created successfully!', 'success'); }
                        setTimeout(() => { window.location.href = '/?refresh=' + Date.now(); }, 1200);
                    } else {
                        console.log('‚ö†Ô∏è –ù–µ–∑–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞');
                        const lang = (window.currentLanguage || localStorage.getItem('language') || 'en');
                        showAlert(lang==='uk' ? '‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–∑–≤–∏—á–∞–π–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...' : '‚ö†Ô∏è Server returned an unusual response. Checking result...', 'warning');
                        setTimeout(() => { window.location.href = '/?refresh=' + Date.now(); }, 1200);
                    }
                } else {
                    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É');
                    console.log('‚ùå –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏:', responseText);
                    window.location.reload();
                }
            })
            .catch(error => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ AJAX:', error);
                
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                button.disabled = false;
                button.innerHTML = '<i class="fas fa-save me-2"></i>Create Task';
            });
        };
        
        console.log('‚úÖ AJAX —Ñ—É–Ω–∫—Ü—ñ—è –≥–æ—Ç–æ–≤–∞');
        
        // –¢–µ—Å—Ç —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof window.submitFormAjax === 'function') {
            console.log('‚úÖ submitFormAjax —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–∞');
        } else {
            console.error('‚ùå submitFormAjax —Ñ—É–Ω–∫—Ü—ñ—è –ù–ï –≤–∏–∑–Ω–∞—á–µ–Ω–∞!');
        }
    // –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
    document.addEventListener('DOMContentLoaded', function() {
        console.log('‚úÖ submitFormAjax –≥–æ—Ç–æ–≤–∞ –ø—ñ—Å–ª—è DOM –∑–∞–≥—Ä—É–∑–∫–∏');
    });
</script>

@section Scripts {
    <script src="/js/create-page.js?v=@DateTime.Now.Ticks" onload="console.log('[Planner] create-page.js –£–°–ü–Ü–®–ù–û –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û')" onerror="console.error('[Planner] –ü–û–ú–ò–õ–ö–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø create-page.js')"></script>
} 