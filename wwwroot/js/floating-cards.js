console.info('[Planner] floating-cards.js loaded');

let floatingTasks = [];
let floatingContainer = null;
let nextTaskId = 1;

// –ö–µ—Ä—É—î–º–æ ¬´—Å–µ—Å—ñ—è–º–∏¬ª —Ä–µ–Ω–¥–µ—Ä—É —Ç–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω—å –ø—Ä–∏ —á–∞—Å—Ç–∏—Ö –∫–ª—ñ–∫–∞—Ö
let renderSessionId = 0;
let pendingTimers = [];

function clearPendingTimers() {
    if (pendingTimers.length === 0) return;
    pendingTimers.forEach(id => clearTimeout(id));
    pendingTimers = [];
}

function initFloatingCards() {
    console.debug('[Planner] Initializing floating cards');
    floatingContainer = document.getElementById('floating-tasks-container');
    
    if (!floatingContainer) {
        console.error('Floating tasks container not found');
        return;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    loadTasksAsFloatingCards();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
    setInterval(updateFloatingPositions, 8000);
}

let usedPositions = [];

function getRandomPosition() {
    const margin = 60;
    const cardWidth = 300;
    const cardHeight = 240;
    const spacing = 40; // –ë—ñ–ª—å—à–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
    
    const maxX = window.innerWidth - cardWidth - margin;
    const maxY = window.innerHeight - cardHeight - margin;
    
    let attempts = 0;
    let position;
    
    // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é, —â–æ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î—Ç—å—Å—è
    do {
        // –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
        const zoneX = Math.floor(Math.random() * 3); // 3 –∑–æ–Ω–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ
        const zoneY = Math.floor(Math.random() * 2); // 2 –∑–æ–Ω–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
        
        const zoneWidth = maxX / 3;
        const zoneHeight = maxY / 2;
        
        position = {
            x: zoneX * zoneWidth + Math.random() * (zoneWidth - cardWidth) + margin,
            y: zoneY * zoneHeight + Math.random() * (zoneHeight - cardHeight) + margin
        };
        attempts++;
    } while (attempts < 50 && isPositionTooClose(position, cardWidth, cardHeight, spacing));
    
    usedPositions.push(position);
    
    // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–∑–∏—Ü—ñ—ó —è–∫—â–æ —ó—Ö –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ
    if (usedPositions.length > 8) {
        usedPositions = usedPositions.slice(-4);
    }
    
    return position;
}

function isPositionTooClose(newPos, cardWidth, cardHeight, spacing) {
    return usedPositions.some(usedPos => {
        const distanceX = Math.abs(newPos.x - usedPos.x);
        const distanceY = Math.abs(newPos.y - usedPos.y);
        
        return distanceX < (cardWidth + spacing) && distanceY < (cardHeight + spacing);
    });
}

function clearUsedPositions() {
    usedPositions = [];
}

function createFloatingCard(task, isNew = false) {
    const isCompleted = task.IsCompleted || task.isCompleted;
    const position = getRandomPosition();
    
    const cardElement = document.createElement('div');
    cardElement.className = `floating-task-card ${isCompleted ? 'completed' : ''} ${isNew ? 'just-created' : ''}`;
    cardElement.style.left = position.x + 'px';
    cardElement.style.top = position.y + 'px';
    cardElement.dataset.taskId = task.Id || task.id;
    
    // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    if (!isCompleted) {
        const colors = ['primary', 'info', 'warning-soft', 'success-soft'];
        const randomColor = colors[Math.floor(Math.random() * colors.length)];
        cardElement.classList.add(`card-${randomColor}`);
    }
    
    // –î–æ–¥–∞—î–º–æ –ø–ª–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä–∞–Ω–¥–æ–º–Ω—É –∑–∞—Ç—Ä–∏–º–∫—É
    setTimeout(() => {
        cardElement.classList.add('gentle-float');
    }, Math.random() * 3000 + 1000);
    
    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
    let formattedDate = '–ù–µ–º–∞—î —Ç–µ—Ä–º—ñ–Ω—É';
    if (task.DueDate || task.dueDate) {
        try {
            const date = new Date(task.DueDate || task.dueDate);
            formattedDate = date.toLocaleDateString('uk-UA', { 
                day: '2-digit', 
                month: 'short', 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        } catch (e) {
            formattedDate = task.DueDate || task.dueDate;
        }
    }
    
    cardElement.innerHTML = `
        <div class="floating-task-header">
            <div class="floating-task-title">${task.Name || task.name}</div>
            <div class="floating-task-status ${isCompleted ? 'completed' : 'active'}">
                <i class="fas ${isCompleted ? 'fa-check-circle' : 'fa-clock'}"></i>
            </div>
        </div>
        ${(task.Description || task.description) && (task.Description || task.description) !== 'undefined' ? 
            `<div class="floating-task-desc">${task.Description || task.description}</div>` : ''}
        <div class="floating-task-date">
            <i class="fas fa-calendar-alt"></i>
            <span>${formattedDate}</span>
        </div>
        <div class="floating-task-actions">
            <form method="post" class="d-inline">
                <input name="__RequestVerificationToken" type="hidden" value="${getAntiForgeryToken()}" />
                <input type="hidden" name="handler" value="ToggleCompletion" />
                <input type="hidden" name="id" value="${task.Id || task.id}" />
                <button type="submit" class="btn btn-sm ${isCompleted ? 'btn-outline-warning' : 'btn-outline-success'}" 
                        title="${isCompleted ? '‚Ü©Ô∏è –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–µ' : '‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ'}">
                    <i class="fas ${isCompleted ? 'fa-undo' : 'fa-check'}"></i>
                </button>
            </form>
            
            <form method="post" class="d-inline" onsubmit="return confirm('üóëÔ∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è?');">
                <input name="__RequestVerificationToken" type="hidden" value="${getAntiForgeryToken()}" />
                <input type="hidden" name="handler" value="Delete" />
                <input type="hidden" name="id" value="${task.Id || task.id}" />
                <button type="submit" class="btn btn-sm btn-outline-danger" title="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏">
                    <i class="fas fa-trash"></i>
                </button>
            </form>
        </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    cardElement.addEventListener('mouseenter', () => {
        cardElement.style.transform = 'translateY(-8px) scale(1.05)';
        cardElement.style.zIndex = '1000';
    });
    
    cardElement.addEventListener('mouseleave', () => {
        cardElement.style.transform = '';
        cardElement.style.zIndex = '';
    });
    
    return cardElement;
}

function loadTasksAsFloatingCards() {
    if (!window.tasks || !Array.isArray(window.tasks)) {
        console.log('No tasks data available for floating cards');
        return;
    }
    
    // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    // –í–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ–∫–Ω–µ –Ω–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    console.log('Floating cards ready, waiting for user interaction');
}

function showFloatingCardsForTasks(tasksToShow) {
    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é —Ä–µ–Ω–¥–µ—Ä—É —Ç–∞ —Å–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –¥—ñ—ó
    renderSessionId++;
    const sessionId = renderSessionId;
    clearPendingTimers();

    // –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    clearFloatingCards();

    // –û—á–∏—â—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è (–ø—ñ—Å–ª—è –Ω–µ–≤–µ–ª–∏–∫–æ—ó –ø–∞—É–∑–∏)
    const afterClearTimer = setTimeout(() => {
        // –Ø–∫—â–æ –∑–∞ —Ü–µ–π —á–∞—Å –ø–æ—á–∞–ª–∞—Å—è –Ω–æ–≤–∞ —Å–µ—Å—ñ—è ‚Äî –ø—Ä–∏–ø–∏–Ω—è—î–º–æ
        if (sessionId !== renderSessionId) return;

        clearUsedPositions();

        // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –æ–∫—Ä–µ–º—É –ø–ª–∞–≤–∞—é—á—É –∫–∞—Ä—Ç–∫—É –∑ –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–æ—é –∞–Ω—ñ–º–∞—Ü—ñ—î—é
        tasksToShow.forEach((task, index) => {
            const baseDelay = 200;
            const randomDelay = Math.random() * 400;
            const totalDelay = index * baseDelay + randomDelay;

            const addTimer = setTimeout(() => {
                // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –Ω–æ–≤–∞ —Å–µ—Å—ñ—è ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–ø—ñ–∑–Ω—ñ–ª—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
                if (sessionId !== renderSessionId) return;

                const cardElement = createFloatingCard(task);
                floatingContainer.appendChild(cardElement);
                floatingTasks.push({
                    element: cardElement,
                    task: task,
                    id: task.Id || task.id
                });

                cardElement.style.animationDelay = `${Math.random() * 0.3}s`;
            }, totalDelay);

            pendingTimers.push(addTimer);
        });
    }, 200);

    pendingTimers.push(afterClearTimer);
}

function clearFloatingCards() {
    // –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫, —â–æ–± –Ω–µ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞–ª–∏—Å—å ¬´–∑–∞–π–≤—ñ –≤—ñ–∫–Ω–∞¬ª
    clearPendingTimers();
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫
    floatingTasks.forEach((floatingTask, index) => {
        setTimeout(() => {
            if (floatingTask.element && floatingTask.element.parentNode) {
                floatingTask.element.classList.add('removing');
                setTimeout(() => {
                    if (floatingTask.element.parentNode) {
                        floatingTask.element.parentNode.removeChild(floatingTask.element);
                    }
                }, 600);
            }
        }, index * 100);
    });
    
    // –û—á–∏—â—É—î–º–æ –º–∞—Å–∏–≤ —ñ –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
        floatingTasks = [];
        clearUsedPositions();
    }, floatingTasks.length * 100 + 600);
}

function addNewFloatingTask(task) {
    console.log('Adding new floating task:', task);
    
    const cardElement = createFloatingCard(task, true);
    floatingContainer.appendChild(cardElement);
    
    floatingTasks.push({
        element: cardElement,
        task: task,
        id: task.Id || task.id
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    if (window.updateCounters) {
        window.updateCounters();
    }
}

function removeFloatingTask(taskId) {
    const taskIndex = floatingTasks.findIndex(ft => ft.id === taskId);
    
    if (taskIndex !== -1) {
        const floatingTask = floatingTasks[taskIndex];
        
        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        floatingTask.element.classList.add('removing');
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            if (floatingTask.element.parentNode) {
                floatingTask.element.parentNode.removeChild(floatingTask.element);
            }
            floatingTasks.splice(taskIndex, 1);
        }, 600);
    }
}

function updateFloatingPositions() {
    console.log('Updating floating positions');
    
    floatingTasks.forEach((floatingTask, index) => {
        setTimeout(() => {
            const newPosition = getRandomPosition();
            const element = floatingTask.element;
            
            // Smooth transition to new position
            element.style.transition = 'left 3s ease-in-out, top 3s ease-in-out';
            element.style.left = newPosition.x + 'px';
            element.style.top = newPosition.y + 'px';
            
            // –°–∫–∏–¥–∞—î–º–æ transition –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            setTimeout(() => {
                element.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            }, 3000);
        }, index * 500);
    });
}

function getAntiForgeryToken() {
    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
    return tokenInput ? tokenInput.value : '';
}

// –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ window –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª—ñ–≤
window.addNewFloatingTask = addNewFloatingTask;
window.removeFloatingTask = removeFloatingTask;
window.loadTasksAsFloatingCards = loadTasksAsFloatingCards;
window.showFloatingCardsForTasks = showFloatingCardsForTasks;
window.clearFloatingCards = clearFloatingCards;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–≤–∞—é—á–∏—Ö –∫–∞—Ä—Ç–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
if (window && window.ENABLE_FLOATING_CARDS) {
    document.addEventListener('DOMContentLoaded', initFloatingCards);
}

// –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
window.addEventListener('resize', () => {
    setTimeout(updateFloatingPositions, 500);
});
